<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEAIACoEAAAJgAAACAgAgABAAEAMAEAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAka6wAIupqgCFpaQAgKGeAHuemAB1mpEAb5aKAGiRgQBijXgAW4dwAFaD
        agBTgWcAUoBlAFGAZQBRgGQAUH9jAFB/YgBQf2MAUH9jAFKAZQBUgmcAV4RqAFuHbwBijHcAaZGAAHCW
        igB3m5IAfZ+ZAIKjnwCGpqQAi6qoAJKurwCPrK4AiaioAIOkogB9n5sAeJuUAHKXjQBsk4UAZI58AFyJ
        cQBVg2gAT39hAE19XgBLfFwASntbAEp7WgBJe1kASHpZAEh5WQBJelkASntbAEx9XQBPf2EAVINnAFyJ
        cABkjnsAbZSGAHSZjwB6nZcAgKKeAIWlogCLqagAka6uAI2qrACGpqYAgaKfAHqemAB0mZAAbZSHAGeQ
        fwBfi3QAVoVoAEx+XABGeVQAQ3dRAEF3TwBBd04AQXZNAEB2TQA/dUwAP3RMAD91TABAdk4AQndPAEV5
        UwBLfloAU4RmAF6LdABokoAAcJeLAHeckwB9oJsAg6SgAImopgCPrawAi6mqAISkowB9oJwAdpuTAHCX
        iwBokoIAYY54AFiIawBMgVsAP4NKADmBQwA3fUAAOIA/ADNsOwBHmlEANHw9ADp+QwAzbzsANn4+ADRw
        PgA3gEMANns/AD6CSgBJflgAV4dqAGOPegBslYYAdJqPAHqelwCAop0Ah6akAI2sqwCIp6cAgaOgAHqe
        mABzmpAAbZWHAGWRfQBdjHEAUYZhACVpJDobdBb/HHcX/xx3F/8ceBj/HHcX/xx3F/8cdxf/HHYX/xx4
        F/8ceBf/G3YW/xx3F/8ceRf/G3UW/xJODURPhGEAXo10AGmTggBxmI0AeJ2VAH+hnACFpqMAjKuqAIam
        pgCAoZ8AeZ6XAHKZjgBrlYUAY5F7AFqNbwBNhlwAG2IYXRx7Gf8ieiH7KHoo7ih5KO4oeijuKHoo7ih5
        KO4oeifuJ3kn7id4Ju4neCfuKHop7jaFNfsdfRn/FFYNZUyEXQBbjHIAZ5KAAG+XiwB2m5MAfaCbAISl
        ogCLqqkAhaWmAH+hnwB5npcAcZmOAGuVhgBjknsAWo1vAE2IXAAeZxxdHXwZ/xhtE5kxejQAM3w3ADN8
        NgAwezMAE1MOKhJRCh4udTEAMno1ADN7NwAyezUAGG8SmR17Gf8TVg1lTIVdAFyNcgBmk4AAb5eLAHac
        kwB9oJsAhKWiAIuqqQCGpacAgKGgAHqemQBzmZAAbJWIAGWSfgBdj3MAUYthACBoIF0ceRj/GW8UmTJ5
        NwA0ezoAMnk2ABFNBx4ceBfhGW4U4A5ABxYvdDUANHo7ADV8OgAYcBKZHHwZ/xRXDWVPh2EAXo92AGiU
        gwBwmIwAd5yUAH2gnACFpaMAjKuqAIimqQCBoaMAe52bAHSZlABulYwAZ5GDAGCOegBXi20ANnQ4Ixhw
        EZgdbBhRN3lBADV4PQAVVAoKGm8V2B19Gf8dexj/GWsTwQQkBgo0dzwAOXxBADh9N1EZcxGYEU4MMFeL
        awBikHsAa5WHAHKZjwB4nZcAf6GeAIampQCOrKwAiqasAIOhpgB8nZ8AdpiXAG+UkQBoj4oAYYqEAFmF
        fQBPf3IARnplAD91WgA7dVAAET0WBBhqE8EdfBn/HXwZ/x18Gf8dfBn/F2USnzNyOgA+fEoARYJTAEuG
        WgBUiWcAXo12AGeSggBvlowAdZqTAHuemgCCo6EAiaioAJGurwCKpK0Ag5+oAHyaoQB1lZoAbpCVAGeK
        kABfgo4AVXeMAEhqhwA9YH4AOV9yADloYAAaahSZHXsZ/x18Gv8dfBn/HXsZ/x18Gf8dehj/FmERe0J7
        UQBNgmAAVIdqAFuKdABijX4AapGIAHCVjwB2mZUAfJ6cAIOjowCLqKoAkq6wAIiirgCBnKkAepajAHKQ
        nQBripkAZIOXAFp4mQBJY58ADhe4XA8Xw8wNFrilBA1+KDZ7OXpCikaCMoMz5xx6GP8cexj/IHUe0Cx2
        K38iah9gRnpcAFGAawBYhHQAXod9AGSKhQBqjosAcJKRAHWWlgB7m50AgqGjAIqmqQCRrK8Ah5+uAH+Z
        qgB4k6QAcIyfAGmFnQBhfZ4AVW+jAAkPlxYTHNj+Exva/xIb2v8QGc3+DBWwnQUTchcygTTKHXwZ/x16
        GP8ZbBOZN21NAEFxXwBKdmwAUnt2AFh/fgBoj5AAZIaLAGmLkABvj5QAf6GmAHuZngCBn6MAiKSpAISd
        ogCFnK4AfZaqAHaPpQBuiKEAZoGgAF53ogBRaKoABQehMhYe3/8SG9r/Ehva/xIa2f8SGtj/EBjK9C14
        VvQdexn/HnwZ/xpvFJk3ZV0AQWhwAEhsegBOcYAAVXeFAFx8igBigY8AZ4aSAG6MlgBzkZoAeZeeAICc
        pACHoqkAjaeuAIOargB7k6oAdI2mAGyFpABlfqMAXHOmAE5krgAFB6IyFh/g/xMb2/8SG9v/Ehva/xIb
        2f8SGtn/Lnhw/x59Gf8dexn/Gm4TmTNWbAA7WX0AQl+FAElliQBQbYwAV3SPAF56kgBlgZQAa4iXAHGO
        mwB4lJ8AfpqkAIWgqQCLpa0AgpeuAHqQqgBziqcAa4KlAGN6pQBacKkATGCxAAUHozIWH+D/Exvc/xMb
        3P8SG9v/Exvb/xIa2f8xenH/HXwZ/x59Gv8XXmngBxGQVzBFigA4To4AQFeRAEhgkgBQapMAWHKVAGF7
        lwBphJkAcIucAHaRoAB9l6QAg5yoAImirQCAlq4AeI6qAHGHpwBpgKYAYXinAFhtqwBLXrMABQelMhcf
        4f8TG9z/Exvc/xIb2/8TG9v/Ehva/ytcpP9Bgnn/QIF5/xtKtf8RGdP/DRa6xAgRlTwxQ5gAO1CXAEZc
        mABRaJoAXHWbAGZ/nABuiJ0AdY+hAHyVpQCCmqkAiKCtAH+UrgB3jKsAb4WnAGd+pwBgdqgAV2usAEpd
        tQAFCKUyFyDi/xMc3P4THNz/Exvb/xMb2/8TG9r/EhrZ/xIa2f8SGtn/EhrZ/xIa2f8SGtj/ERnS/w0V
        t6oEDIMpN0mdAEZbngBVbZ4AboioAGyFnwB0jKIAe5KmAIGYqQCHnq0AfpKuAHaLqwBuhKgAZnynAF90
        qABWaq0ASVy2AAUHpjIYIOL/Exvd/xMc3f8THNz/Exva/xIb2v8SG9r/Ehva/xIb2v8SGtn/Ehra/xIb
        2v8SGtr/ERnY/xAYzf0MFa6IO02gAE9loABedqAAaoKhAHKKowB5kacAgJaqAIacrgB8ka4AdYqrAG6D
        qQBme6cAXnOpAFVprABJW7cABQikMhgg4/8THN3/Exzd/xMc3P8THNz/Exzb/xMc2v8SG9r/Ehvb/xIb
        2v8SG9r/Ehva/xEa2v8SGtr/ERrZ/xEZ1P8HD4UpTGGiAF1zoQBogKIAcYikAHiPpwB/laoAhZuuAHuP
        rgB0iKsAbYKpAGZ6qABqgL4AVWmuAElatwAFCKUyGCHi/xQc3v8UHN7/Exzd/xMc3P8THNz/Exvb/xMc
        2/8SG9v/Ehvb/xIb2/8SG9v/Ehvb/xIa2v8SGtr/EhrT4AMGYwpMYJ8AXXOiAGh+ogBwhqQAd42mAH2T
        qgCDma0Aeo6uAHOHqwBtgakAZnqoAF5yqgBVaLAASVq5AAYIpjIZIuT/FB3f/xQc3/8UHd//Exze/xMc
        3f8THNz/Exzd/xIc3f8SG9v/Ehvc/xIb3P8SG9z/Exvb9BEa1IcNFMQNQlWrAFFmpQBedKMAaH6iAG+F
        pAB2jKYAfJKpAIKYrAB6jq4Ac4erAG2BqQBmeqgAXnKqAFZosABJWroABgioMhoi5f8VHeD/FR3h/xQd
        4P8UHd//FBze/xMc3v8THN3/Exzd/xMc3f8SG93/Exzd9BIb2o4JEMAUOEmzAEJUrgBMYKcAV2ykAGB3
        ogBpf6IAcIajAHeNpgB8kqkAgpesAHuOrgB0iKwAbYGpAGZ7qQBfcqsAVmmxAElauwAFCKoyGiPm/xYe
        4f8VHuH/FB7g/xUd4P8UHeD/FB3f/xQd3/8UHN//Exze/BMc3JgQF9EXNUW3AD1OsQBEV6wAS1+nAFJm
        pABacKEAYnmgAGqBoQBxh6MAd42mAHySqQCCl6wAfI+vAHWJrABvg6kAaHyqAF1wpwBXarMASlu9AAUJ
        rDIbI+b/Fh7h/xUe4f8VHeH/FB3g/xQd4P8UHN//FB3f/xMb3KMQGMgmNEK6ADpKswBAUa4ARliqAEtf
        pQBRZaIAV2ygAF10nwBke58Aa4KgAHGIogB3jqUAfZKoAIKYrAB+kq8AeIutAHGFqgBqfqoAYnatAFps
        tABNXr8ABgmvMh0m6P8XH+P/FR7h/xUe4f8VHuH/FR7i/xQd3q4SG9kpNEK8ADpJtgA+T7EAQ1SrAEdZ
        pwBLXqQAUGShAFVqngBacJ0AYXedAGd+ngBthJ8Ac4qiAHmPpQB+lKgAhJmsAIGVsQB6jq4Ac4irAGyA
        qwBmea0AXXC0AFJkwAAJDbcgISnn/xcf4/8WH+L/FR7i/xQd3cETG9U4NEO/ADpJuQA+TrQAQlKuAEVX
        qgBIW6UATGCiAFBknwBUaZ0AWW+cAF51nABke5wAaoKeAHCIoAB2jaIAfJKmAIGXqQCGnK0Ag5exAH2R
        rgB2i6wAb4OrAGl9rQBhdLMAV2m+AEhZzgAmL+qbJS7n/xcf4c8UHd5ANkXAADxLuwBAULUAQ1SwAEVW
        rABIWagAS12kAE5hoQBSZZ4AVWmcAFlumgBdc5oAYnmbAGh/nQBuhZ8Ac4uhAHiQowB+laYAhJqqAIme
        rQCGmrIAf5SvAHmOrQBzh6sAbICsAGV5sQBdcboAUmTGAEdY0AB/m/8APEzKAD9PwQBCU7oARle0AEla
        rgBLXKoATF6mAE5gowBQY6AAU2eeAFdrnABab5oAXnSZAGJ5mgBnfpwAbIOeAHGJoAB2jqIAfJOkAIGY
        pwCGnasAi6GuAIicsgCCl68AfZGtAHaLqwBwhasAa36vAGR4tgBbb78AU2bGAE1exwBKXMMASly8AExe
        tQBOYK8AUGKpAFFjpQBSZaIAU2afAFVpngBYbJwAW3CbAF90mgBieZoAZn2aAGuCnABwh54AdIygAHmR
        owB+lqUAhJupAImgrACOpK8Ai5+yAIWZsACAlK0Aeo6rAHSJqwBvg64AaX6zAGJ2ugBcbr8AVmjAAFRl
        vgBTZbgAVGaxAFVoqwBWaaYAV2qiAFdqnwBYbJ4AWm6cAF1ynABgdZsAY3maAGd9mgBqgpsAaYCWAHOL
        nwB4j6EAfJSkAIGZpgCHnqoAjKKtAJGnsACNobMAiJuwAIKXrgB9kawAeIytAHOHrwBug7MAaHy4AGF1
        vABcb70AWWy7AFhrtQBZbK8AWm2qAFtupABbbqEAW26eAFtwnQBecp0AYHacAGN5mwBmfZsAaYGbAG2E
        nABxiZ4Ado2gAHqSogB/l6UAhZyoAIqhqwCOpa4AlKqxAP//////////////////////AAD//wAA//8e
        eP//HDj//xgY///wH///8A///wAP//4AP//+AD///gA///4AH//+AAf//gAB//4AAP/+AAB//gAAf/4A
        AP/+AAP//gAP//4AP//+AP///gP///8P////////////////////////KAAAACAAAABAAAAAAQABAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////w==
</value>
  </data>
</root>